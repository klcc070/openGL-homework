#include<GL/glut.h>
#include <windows.h>
#include<math.h>
#include<iostream>
# pragma comment(linker,"/subsystem:\"console\" /entry:\"mainCRTStartup\"")
using namespace std;

void setPixel(int x, int y) {
	glPointSize(1);
	glBegin(GL_POINTS);
	glVertex2i(x, y);
	glEnd(); 
	Sleep(1);
	glFlush();
}
void BResehaham_Line(int x0, int y0, int x1, int y1) {
	int tempx,tempy;
	if (y0 > y1) {
		tempy = y0;
		tempx = x0;
		x0 = x1;
		y0 = y1;
		x1 = tempx;
		y1 = tempy;
	}
	int dx, dy, e, i, x, y;
	double k;
	k = (double(y1 - y0) / double(x1 - x0));
	x = x0, y = y0;

	if (k <= 1 && k>=0) {
		dx = x1 - x0, dy = y1 - y0, e = 2 * dy - dx;


		//cout << 1;
		for (i = 0; i <= dx; i++) {
			setPixel(x, y);
			x++;
			if (e >= 0)
			{
				y++;
				e = e + 2 * dy - 2 * dx;
			}
			else
				e = e + 2 * dy;
		}
	}
	else if (k > 1) {
		dx = x1 - x0, dy = y1 - y0, e = 2 * dx - dy;
		for (i = 0; i <= dy; i++) {
			setPixel(x, y);
			y++;
			if (e >= 0)
			{
				x++;
				e = e + 2 * dx - 2 * dy;
			}
			else
				e = e + 2 * dx;
		}
	}
	else if (k <= 0 && k >= -1) {
		dx = x1 - x0, dy = y1 - y0, e = 2 * dy - dx;
		//cout << 1;
		for (i = 0; i <= abs(dx); i++) {
			setPixel(x, y);
			x--;
			if (e >= 0)
			{
				y++;
				e = e - 2 * dy + 2 * dx;
			}
			else
				e = e + 2 * dy;
		}
	}
	else if (k < -1) {
		dx = x1 - x0, dy = y1 - y0, e = 2 * dx - dy;
		for (i = 0; i <= abs(dy); i++) {
			setPixel(x, y);
			y++;
			if (e >= 0)
			{
				x--;
				e = e + 2 * dx - 2 * dy;
			}
			else
				e = e -2 * dx;
		}
	}
	
	
}
void RenderScene(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	

	//glBegin(GL_POLYGON);
	BResehaham_Line(0, 0, -100,-500);
	/*
	glVertex2f(0.0f, 0.0f);
	glVertex2f(0.0f, 50.0f);//
	glVertex2f(15.0f, 25.0f);//
	glVertex2f(40.0f, 25.0f);//
	glVertex2f(25.0f, 0.0f);//
	glVertex2f(40.0f, -25.0f);//
	glVertex2f(15.0f, -25.0f);
	glVertex2f(0.0f, -50.0f);
	glVertex2f(-15.0f, -25.0f);
	glVertex2f(-40.0f, -25.0f);
	glVertex2f(-25.0f, 0.0f);
	glVertex2f(-40.0f, 25.0f);
	glVertex2f(-15.0f, 25.0f);
	glVertex2f(0.0f, 50.0f);
	
	*/
	glEnd();
	glFlush();

}

//设置绘图的环境


int main(int argc, char* argv[]) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutCreateWindow("栅格化画直线");
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	gluOrtho2D(-100, 100, -100, 100);
	glutDisplayFunc(RenderScene);
	glutMainLoop();
	return 0;


}
